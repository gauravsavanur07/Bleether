import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _extends from "@babel/runtime/helpers/extends";
import { ApolloLink } from 'apollo-link';
import { getMainDefinition } from 'apollo-utilities';
export var APOLLO_QUERY_INIT = 'APOLLO_QUERY_INIT';
export var APOLLO_QUERY_RESULT = 'APOLLO_QUERY_RESULT';
export var APOLLO_MUTATION_INIT = 'APOLLO_MUTATION_INIT';
export var APOLLO_MUTATION_RESULT = 'APOLLO_MUTATION_RESULT';
export var APOLLO_SUBSCRIPTION_INIT = 'APOLLO_SUBSCRIPTION_INIT';
export var APOLLO_SUBSCRIPTION_RESULT = 'APOLLO_SUBSCRIPTION_RESULT';

var payload = function payload(_ref) {
  var operationName = _ref.operationName,
      variables = _ref.variables,
      query = _ref.query;
  return {
    operationName: operationName,
    variables: variables,
    document: query
  };
};

var initAction = function initAction(type) {
  return function (operation) {
    return _extends({
      type: type
    }, payload(operation));
  };
};

var resultAction = function resultAction(type) {
  return function (result, operation) {
    return _extends({
      type: type,
      result: result
    }, payload(operation));
  };
};

export var queryInit = initAction(APOLLO_QUERY_INIT);
export var queryResult = resultAction(APOLLO_QUERY_RESULT);
export var mutationInit = initAction(APOLLO_MUTATION_INIT);
export var mutationResult = resultAction(APOLLO_MUTATION_RESULT);
export var subscriptionInit = initAction(APOLLO_SUBSCRIPTION_INIT);
export var subscriptionResult = resultAction(APOLLO_SUBSCRIPTION_RESULT);

var isQuery = function isQuery(op) {
  return op === 'query';
};

var isMutation = function isMutation(op) {
  return op === 'mutation';
};

var isSubscription = function isSubscription(op) {
  return op === 'subscription';
};

export var ReduxLink = function (_ApolloLink) {
  _inheritsLoose(ReduxLink, _ApolloLink);

  function ReduxLink(store) {
    var _this;

    _this = _ApolloLink.call(this) || this;
    _this.store = store;
    return _this;
  }

  var _proto = ReduxLink.prototype;

  _proto.request = function request(operation, forward) {
    var _this2 = this;

    var observer = forward(operation);
    var definition = getMainDefinition(operation.query);

    if (isQuery(definition.operation)) {
      this.store.dispatch(queryInit(operation));
    } else if (isMutation(definition.operation)) {
      this.store.dispatch(mutationInit(operation));
    } else if (isSubscription(definition.operation)) {
      this.store.dispatch(subscriptionInit(operation));
    }

    return observer.map(function (result) {
      if (isQuery(definition.operation)) {
        _this2.store.dispatch(queryResult(result, operation));
      } else if (isMutation(definition.operation)) {
        _this2.store.dispatch(mutationResult(result, operation));
      } else if (isSubscription(definition.operation)) {
        _this2.store.dispatch(subscriptionResult(result, operation));
      }

      return result;
    });
  };

  return ReduxLink;
}(ApolloLink);
export default ReduxLink;